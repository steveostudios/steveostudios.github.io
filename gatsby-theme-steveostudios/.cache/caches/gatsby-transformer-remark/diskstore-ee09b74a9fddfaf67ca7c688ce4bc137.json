{"expireTime":9007200853966147000,"key":"transformer-remark-markdown-ast-2857597df1c7b7a0f359d9954f8790f8-gatsby-remark-imagesgatsby-remark-embed-youtubegatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Testing is one of those things that I have shrugged off for a while. It’s like flossing. I know the benefits. People say that it’s easy. It will make Future-Steve invincible. And, I feel bad about ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":198,"offset":198},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"not","position":{"start":{"line":2,"column":199,"offset":199},"end":{"line":2,"column":202,"offset":202},"indent":[]}}],"position":{"start":{"line":2,"column":198,"offset":198},"end":{"line":2,"column":203,"offset":203},"indent":[]}},{"type":"text","value":" doing it. It just is one more thing that I am unsure of how to fit into my daily routine. So, with this new project I am working on I decided to do it right from the beginning.","position":{"start":{"line":2,"column":203,"offset":203},"end":{"line":2,"column":380,"offset":380},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":380,"offset":380},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I’m going to show you how to do some basic testing. Our end goal for this post will be to write a test for the following module:","position":{"start":{"line":4,"column":1,"offset":382},"end":{"line":4,"column":129,"offset":510},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":382},"end":{"line":4,"column":129,"offset":510},"indent":[]}},{"type":"html","lang":"Javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isValidEmail</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">email</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>email <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token regex\">/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w+)+$/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":6,"column":1,"offset":512},"end":{"line":11,"column":4,"offset":677},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"(Side note: I know that this regular expression is not perfect. There are thousands of these out there and with every one a ","position":{"start":{"line":13,"column":1,"offset":679},"end":{"line":13,"column":125,"offset":803},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"thousand-and-one critics.","position":{"start":{"line":13,"column":126,"offset":804},"end":{"line":13,"column":151,"offset":829},"indent":[]}}],"position":{"start":{"line":13,"column":125,"offset":803},"end":{"line":13,"column":152,"offset":830},"indent":[]}},{"type":"text","value":" That said, we’re gonna write some tests against this function.)","position":{"start":{"line":13,"column":152,"offset":830},"end":{"line":13,"column":216,"offset":894},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":679},"end":{"line":13,"column":216,"offset":894},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’re going to use ","position":{"start":{"line":15,"column":1,"offset":896},"end":{"line":15,"column":20,"offset":915},"indent":[]}},{"type":"linkReference","identifier":"mocha","label":"Mocha","referenceType":"collapsed","children":[{"type":"text","value":"Mocha","position":{"start":{"line":15,"column":21,"offset":916},"end":{"line":15,"column":26,"offset":921},"indent":[]}}],"position":{"start":{"line":15,"column":20,"offset":915},"end":{"line":15,"column":29,"offset":924},"indent":[]}},{"type":"text","value":" for our testing framework. Honestly, to get started I looked for the most popular framework and went with that. I don’t know a whole lot about testing at this point, so I wanted to use something well documented and well used.","position":{"start":{"line":15,"column":29,"offset":924},"end":{"line":15,"column":255,"offset":1150},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":896},"end":{"line":15,"column":255,"offset":1150},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’re also going to use ","position":{"start":{"line":17,"column":1,"offset":1152},"end":{"line":17,"column":25,"offset":1176},"indent":[]}},{"type":"linkReference","identifier":"chai","label":"Chai","referenceType":"collapsed","children":[{"type":"text","value":"Chai","position":{"start":{"line":17,"column":26,"offset":1177},"end":{"line":17,"column":30,"offset":1181},"indent":[]}}],"position":{"start":{"line":17,"column":25,"offset":1176},"end":{"line":17,"column":33,"offset":1184},"indent":[]}},{"type":"text","value":". From my understanding this is a Mocha plugin that just adds some assertions. It’s gonna make our tests more human-discernible.","position":{"start":{"line":17,"column":33,"offset":1184},"end":{"line":17,"column":161,"offset":1312},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1152},"end":{"line":17,"column":161,"offset":1312},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let’s start by installing these:","position":{"start":{"line":19,"column":1,"offset":1314},"end":{"line":19,"column":33,"offset":1346},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1314},"end":{"line":19,"column":33,"offset":1346},"indent":[]}},{"type":"html","lang":"shell","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> i mocha -D\n<span class=\"token function\">npm</span> i chai -D</code></pre></div>","position":{"start":{"line":21,"column":1,"offset":1348},"end":{"line":24,"column":4,"offset":1389},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"…and open up our new ","position":{"start":{"line":26,"column":1,"offset":1391},"end":{"line":26,"column":22,"offset":1412},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">test.js</code>","position":{"start":{"line":26,"column":22,"offset":1412},"end":{"line":26,"column":31,"offset":1421},"indent":[]}},{"type":"text","value":" file.","position":{"start":{"line":26,"column":31,"offset":1421},"end":{"line":26,"column":37,"offset":1427},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1391},"end":{"line":26,"column":37,"offset":1427},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"From here, we need to initiate our Javascript file and let it know what it’s supposed to do.","position":{"start":{"line":28,"column":1,"offset":1429},"end":{"line":28,"column":93,"offset":1521},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1429},"end":{"line":28,"column":93,"offset":1521},"indent":[]}},{"type":"html","lang":"Javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// test/test.js</span>\n<span class=\"token string\">'use strict'</span>\n<span class=\"token keyword\">const</span> chai <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'chai'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> login <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../index'</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":30,"column":1,"offset":1523},"end":{"line":35,"column":4,"offset":1632},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here we are using Chai like a plugin by requiring it. Also, we’re require the file we want to test. Makes sense, right?!","position":{"start":{"line":37,"column":1,"offset":1634},"end":{"line":37,"column":121,"offset":1754},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1634},"end":{"line":37,"column":121,"offset":1754},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Okay, now, let’s write our first ","position":{"start":{"line":39,"column":1,"offset":1756},"end":{"line":39,"column":34,"offset":1789},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">describe</code>","position":{"start":{"line":39,"column":34,"offset":1789},"end":{"line":39,"column":44,"offset":1799},"indent":[]}},{"type":"text","value":". A ","position":{"start":{"line":39,"column":44,"offset":1799},"end":{"line":39,"column":48,"offset":1803},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">describe</code>","position":{"start":{"line":39,"column":48,"offset":1803},"end":{"line":39,"column":58,"offset":1813},"indent":[]}},{"type":"text","value":" tells Mocha how to treat a certain function.","position":{"start":{"line":39,"column":58,"offset":1813},"end":{"line":39,"column":103,"offset":1858},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1756},"end":{"line":39,"column":103,"offset":1858},"indent":[]}},{"type":"html","lang":"Javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// test/test.js</span>\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#isValidEmail'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// we're going to put our actual test in here.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":41,"column":1,"offset":1860},"end":{"line":46,"column":4,"offset":1978},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Sweet. Now the first test we want to write is to make sure a “normal looking” email address (like “abc@def.com) ”returns true. So, in the describe let’s add our test. (the new stuff is in ","position":{"start":{"line":48,"column":1,"offset":1980},"end":{"line":48,"column":189,"offset":2168},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"bold","position":{"start":{"line":48,"column":191,"offset":2170},"end":{"line":48,"column":195,"offset":2174},"indent":[]}}],"position":{"start":{"line":48,"column":189,"offset":2168},"end":{"line":48,"column":197,"offset":2176},"indent":[]}},{"type":"text","value":").","position":{"start":{"line":48,"column":197,"offset":2176},"end":{"line":48,"column":199,"offset":2178},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1980},"end":{"line":48,"column":199,"offset":2178},"indent":[]}},{"type":"html","lang":"Javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// test/test.js</span>\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#isValidEmail'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should return true for abc@def.com'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> login<span class=\"token punctuation\">.</span><span class=\"token function\">isValidEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc@def.com'</span><span class=\"token punctuation\">)</span>\n    chai<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":50,"column":1,"offset":2180},"end":{"line":58,"column":4,"offset":2391},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now, let’s break this down. The ","position":{"start":{"line":60,"column":1,"offset":2393},"end":{"line":60,"column":33,"offset":2425},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">it</code>","position":{"start":{"line":60,"column":33,"offset":2425},"end":{"line":60,"column":37,"offset":2429},"indent":[]}},{"type":"text","value":" line should read like a sentence, phrased with ","position":{"start":{"line":60,"column":37,"offset":2429},"end":{"line":60,"column":85,"offset":2477},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"“it should…”","position":{"start":{"line":60,"column":86,"offset":2478},"end":{"line":60,"column":98,"offset":2490},"indent":[]}}],"position":{"start":{"line":60,"column":85,"offset":2477},"end":{"line":60,"column":99,"offset":2491},"indent":[]}},{"type":"text","value":" and then what it should do. Treat this like a note about how the code should test. If the test fails you will see this, so it needs to be helpful as to what this test is actually testing.","position":{"start":{"line":60,"column":99,"offset":2491},"end":{"line":60,"column":287,"offset":2679},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":2393},"end":{"line":60,"column":287,"offset":2679},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Next, we save the result of the function (with the fake email address) as a variable.","position":{"start":{"line":62,"column":1,"offset":2681},"end":{"line":62,"column":86,"offset":2766},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":2681},"end":{"line":62,"column":86,"offset":2766},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Finally, we use Chai to describe what we want the result to look like. It’s crazy how readable this is!","position":{"start":{"line":64,"column":1,"offset":2768},"end":{"line":64,"column":104,"offset":2871},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":2768},"end":{"line":64,"column":104,"offset":2871},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Chai expect","position":{"start":{"line":66,"column":1,"offset":2873},"end":{"line":66,"column":12,"offset":2884},"indent":[]}},{"type":"linkReference","identifier":"the","label":"the","referenceType":"full","children":[{"type":"text","value":"s","position":{"start":{"line":66,"column":13,"offset":2885},"end":{"line":66,"column":14,"offset":2886},"indent":[]}}],"position":{"start":{"line":66,"column":12,"offset":2884},"end":{"line":66,"column":20,"offset":2892},"indent":[]}},{"type":"text","value":" result to be true.","position":{"start":{"line":66,"column":20,"offset":2892},"end":{"line":66,"column":39,"offset":2911},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":2873},"end":{"line":66,"column":39,"offset":2911},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"BOOM! We wrote a test!","position":{"start":{"line":68,"column":1,"offset":2913},"end":{"line":68,"column":23,"offset":2935},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":2913},"end":{"line":68,"column":23,"offset":2935},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"…but how do we… ","position":{"start":{"line":70,"column":1,"offset":2937},"end":{"line":70,"column":17,"offset":2953},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"test it…","position":{"start":{"line":70,"column":18,"offset":2954},"end":{"line":70,"column":26,"offset":2962},"indent":[]}}],"position":{"start":{"line":70,"column":17,"offset":2953},"end":{"line":70,"column":27,"offset":2963},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":2937},"end":{"line":70,"column":27,"offset":2963},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It turns out this is ridiculously simple with npm. In your package.json, let’s add a test script","position":{"start":{"line":72,"column":1,"offset":2965},"end":{"line":72,"column":97,"offset":3061},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":2965},"end":{"line":72,"column":97,"offset":3061},"indent":[]}},{"type":"html","lang":"json","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n...\n<span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mocha --reporter spec\"</span>\n<span class=\"token punctuation\">}</span>\n...</code></pre></div>","position":{"start":{"line":74,"column":1,"offset":3063},"end":{"line":81,"column":4,"offset":3147},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here we are telling npm that Mocha is our tester. Somehow it will find that ","position":{"start":{"line":83,"column":1,"offset":3149},"end":{"line":83,"column":77,"offset":3225},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">test.js</code>","position":{"start":{"line":83,"column":77,"offset":3225},"end":{"line":83,"column":86,"offset":3234},"indent":[]}},{"type":"text","value":" file. Now, if we run ","position":{"start":{"line":83,"column":86,"offset":3234},"end":{"line":83,"column":108,"offset":3256},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">npm test</code>","position":{"start":{"line":83,"column":108,"offset":3256},"end":{"line":83,"column":118,"offset":3266},"indent":[]}},{"type":"text","value":" in our terminal, Mocha should run the test file and should spit out some stuff!","position":{"start":{"line":83,"column":118,"offset":3266},"end":{"line":83,"column":198,"offset":3346},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":3149},"end":{"line":83,"column":198,"offset":3346},"indent":[]}},{"type":"html","lang":"shell","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token operator\">></span> mocha --reporter spec\n\n<span class=\"token comment\">#isValidEmail</span>\n✓ should <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">true</span> <span class=\"token keyword\">for</span> abc@def.com\n\n<span class=\"token number\">1</span> passing <span class=\"token punctuation\">(</span>9ms<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":85,"column":1,"offset":3348},"end":{"line":92,"column":4,"offset":3453},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"WHAT! This is freaking cool — and easy!","position":{"start":{"line":94,"column":1,"offset":3455},"end":{"line":94,"column":40,"offset":3494},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":3455},"end":{"line":94,"column":40,"offset":3494},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let’s add a few more tests for giggles:","position":{"start":{"line":96,"column":1,"offset":3496},"end":{"line":96,"column":40,"offset":3535},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":3496},"end":{"line":96,"column":40,"offset":3535},"indent":[]}},{"type":"html","lang":"javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// user forgot the `something@`</span>\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return false for abcdef.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> login<span class=\"token punctuation\">.</span><span class=\"token function\">isValidEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcdef.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  chai<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// user forgot the `.com`</span>\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return false for abc@def\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> login<span class=\"token punctuation\">.</span><span class=\"token function\">isValidEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc@def\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  chai<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// test for 2 character TLDs</span>\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return true for abc@def.co\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> login<span class=\"token punctuation\">.</span><span class=\"token function\">isValidEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc@def.co\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  chai<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// test for country TLDs</span>\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return true for abc@def.co.uk\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> login<span class=\"token punctuation\">.</span><span class=\"token function\">isValidEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc@def.co.uk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  chai<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":98,"column":1,"offset":3537},"end":{"line":122,"column":4,"offset":4213},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"and then run ","position":{"start":{"line":124,"column":1,"offset":4215},"end":{"line":124,"column":14,"offset":4228},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">npm test</code>","position":{"start":{"line":124,"column":14,"offset":4228},"end":{"line":124,"column":24,"offset":4238},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":124,"column":24,"offset":4238},"end":{"line":124,"column":25,"offset":4239},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":4215},"end":{"line":124,"column":25,"offset":4239},"indent":[]}},{"type":"html","lang":"shell","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token operator\">></span> mocha --reporter spec\n\n<span class=\"token comment\">#isValidEmail</span>\n✓ should <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">true</span> <span class=\"token keyword\">for</span> abc@def.com\n✓ should <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">false</span> <span class=\"token keyword\">for</span> abcdef.com\n✓ should <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">false</span> <span class=\"token keyword\">for</span> abc@def\n✓ should <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">true</span> <span class=\"token keyword\">for</span> abc@def.co\n✓ should <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">true</span> <span class=\"token keyword\">for</span> abc@def.co.uk\n\n<span class=\"token number\">5</span> passing <span class=\"token punctuation\">(</span>26ms<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":126,"column":1,"offset":4241},"end":{"line":137,"column":4,"offset":4493},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Sweet. Now, let’s say the Future-Steve rides in on his hover-board and messes something up with this function (because in the future I still don’t understand regular expressions!).","position":{"start":{"line":139,"column":1,"offset":4495},"end":{"line":139,"column":181,"offset":4675},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":4495},"end":{"line":139,"column":181,"offset":4675},"indent":[]}},{"type":"html","lang":"Javascript","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.js</span>\n\n<span class=\"token comment\">// removed the bold *(\\.\\w+)+$ from the old verion</span>\n<span class=\"token comment\">// which is the bit at the end that tell it that it needs the '.com'</span>\n\n<span class=\"token comment\">// Future-Steve's modified code</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isValidEmail</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">email</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>email <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token regex\">/^\\w+([\\.-]?\\w+)\\*@\\w+([\\.-]?\\w+)/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":141,"column":1,"offset":4677},"end":{"line":152,"column":4,"offset":4986},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"When Future-Steve runs ","position":{"start":{"line":154,"column":1,"offset":4988},"end":{"line":154,"column":24,"offset":5011},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">npm test</code>","position":{"start":{"line":154,"column":24,"offset":5011},"end":{"line":154,"column":34,"offset":5021},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":154,"column":34,"offset":5021},"end":{"line":154,"column":35,"offset":5022},"indent":[]}}],"position":{"start":{"line":154,"column":1,"offset":4988},"end":{"line":154,"column":35,"offset":5022},"indent":[]}},{"type":"html","lang":"shell","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token operator\">></span> mocha --reporter spec\n\n<span class=\"token comment\">#isValidEmail</span>\n✓ should <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">true</span> <span class=\"token keyword\">for</span> abc@def.com\n✓ should <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">false</span> <span class=\"token keyword\">for</span> abcdef.com <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> should <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">false</span> <span class=\"token keyword\">for</span> abc@def\n✓ should <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">true</span> <span class=\"token keyword\">for</span> abc@def.co\n✓ should <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">true</span> <span class=\"token keyword\">for</span> abc@def.co.uk\n\n<span class=\"token number\">4</span> passing <span class=\"token punctuation\">(</span>26ms<span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span> failing\n\n<span class=\"token number\">1</span>. <span class=\"token comment\">#isValidEmail should return false for abc@def:</span>\n\n   AssertionError: expected <span class=\"token boolean\">true</span> to be <span class=\"token boolean\">false</span>\n\n   - expected - actual\n\n   -true\n   +false\n\n   at Context.it <span class=\"token punctuation\">(</span>test/test.js:47:30<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":156,"column":1,"offset":5024},"end":{"line":178,"column":4,"offset":5467},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Ha! Booyah Future-Steve! In your FACE! Future-Steve will know what he broke and exactly how he can fix it! Pretty cool!","position":{"start":{"line":180,"column":1,"offset":5469},"end":{"line":180,"column":120,"offset":5588},"indent":[]}}],"position":{"start":{"line":180,"column":1,"offset":5469},"end":{"line":180,"column":120,"offset":5588},"indent":[]}},{"type":"definition","identifier":"mocha","label":"mocha","title":"Mocha","url":"https://mochajs.org/","position":{"start":{"line":182,"column":1,"offset":5590},"end":{"line":182,"column":38,"offset":5627},"indent":[]}},{"type":"definition","identifier":"chai","label":"chai","title":"Chai","url":"http://chaijs.com/","position":{"start":{"line":183,"column":1,"offset":5628},"end":{"line":183,"column":34,"offset":5661},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":184,"column":1,"offset":5662}}}}
{"data":{"site":{"siteMetadata":{"title":"Steveostudios","author":"@steveostudios"}},"markdownRemark":{"id":"67bf7c2e-ae2b-58fd-8dfb-4f8316ec1d45","excerpt":"As a designer (aka programming noob), I want to create a workflow that simplifies some of the things that writing in Jekyll requires. I don’t write in vim, I…","html":"<p>As a designer (aka programming noob), I want to create a workflow that simplifies some of the things that writing in Jekyll requires. I don’t write in vim, I still have a conceptually hard time with git, and terminal still freaks me out. I wanted a workflow were I get the benefits of Jekyll, but with a designer mentality.</p>\n<!--more-->\n<p>That said, starting terminal, finding the directory, running Jekyll and serving up localhost in my browser seems like it could be simplified (programmers are lazy, right?). So I set out to write a script to do this for me.</p>\n<p>I had trouble with just one script, so I actually wrote two, one cueing the other. These are just text files with the <code class=\"language-text\">.command</code> file extension. The first one I called <code class=\"language-text\">JekyllServe.command</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd /path/to/site/folder\njekyll serve</code></pre></div>\n<p>(you can see where the creative name came from, right?)</p>\n<p>All it does is start the server. Simple, right? When you double click this it opens up terminal and executes those two lines. I could have stopped here, but I also wanted to open up Chrome as well, to <code class=\"language-text\">http://localhost:4000</code>.</p>\n<p>The second script I called <code class=\"language-text\">LocalStartup.command</code>. This is the one I will generally double-click when I am ready to start writing a post or edit my local copy of the site.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">open /path/to/JekyllServe.command\nsleep 2\nopen http://localhost:4000\nexit 0</code></pre></div>\n<p>This is the actual “app” that I run. As you can see, when you double-click this it will first run the jekyll serve command from <code class=\"language-text\">JekyllServe.command</code>, then wait 2 second (for the server to finish starting), then open your browser to <code class=\"language-text\">http://localhost:4000</code>.</p>\n<p>I’m going to continue to perfect this later, like add a “publish” command, and hopefully knock this down to one file, but as of right now, here it is!</p>","frontmatter":{"title":"Creating a Jekyll Workflow Part 1","date":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/creating-a-jekyll-workflow-pt-1/2015-04-16-creating-a-jekyll-workflow-pt-1/","previous":{"fields":{"slug":"/git-solo/"},"frontmatter":{"title":"Git for Solo Development"}},"next":null}}
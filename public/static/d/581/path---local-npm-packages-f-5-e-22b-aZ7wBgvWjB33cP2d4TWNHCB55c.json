{"data":{"site":{"siteMetadata":{"title":"Steveostudios","author":"@steveostudios"}},"markdownRemark":{"id":"4af7195d-1d30-52be-83d1-fb046c63f616","excerpt":"There are a few scenarios when you may want to “publish” npm packages locally. Let’s say you’re working on a little module that you don’t really want up on the…","html":"<p>There are a few scenarios when you may want to “publish” npm packages locally.</p>\n<ol>\n<li>Let’s say you’re working on a little module that you don’t really want up on the world-wide-web (at least yet).</li>\n<li>You may want to keep a package private but don’t yet have the mulah to fork over to npmjs.org to buy a private package subscription.</li>\n</ol>\n<p>Well it turns out it’s pretty easy to “host” a package locally while you’re developing it. Once you have the module made, including a <code class=\"language-text\">package.json</code> and all of it’s working features, you can add it to another project by doing this little number:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">npm i --save ./../packages/my-package -D</code></pre></div>\n<p>This will, in turn, add this to your <code class=\"language-text\">package.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">// package.json\n  &quot;dependencies&quot;: {\n    ...\n    &quot;my-package&quot;: &quot;file:../packages/my-package&quot;,</code></pre></div>\n<p>Pretty sweat, huh?!</p>\n<h2>Major drawbacks</h2>\n<p>Now, this isn’t a perfect solution. But you can use it by yourself in development until you’re ready for the big time! Here are some of the drawbacks that I have found:\nUpdating is a bit of a pain</p>\n<p>npm looks for semver version numbers. If you look above, you’ll notice that it doesn’t have them like a normal package. Therefore local packages don’t update automatically. If you make a change to your local dependency then you have to force update it. That’s okay. The file reference is saved in your package.json, so npm know where to find it. You’ll need to manually delete your node_modules folder and recreate it, ensuring that everything is up-to-date (including the local package you added).</p>\n<p>rm -rf node_modules\nnpm install\nnpm start</p>\n<p>Doesn’t work for teams</p>\n<p>You can’t “host” this on a server like this to share. I mean, you probably can, but it would be super inefficient and hacky. If you’re trying to do that then you should look into either paying $7/mo/user over at npm or setting up your own Sinatra server.</p>\n<p>It is private though! Ain’t nobody checking this code out.</p>\n<p>There you go. It turns out you can “publish” npm packages locally.</p>\n<hr>\n<p>I’ll go over my particular workflow in another post, and show you specifically how I use Git not only as my code repository, but also my task list. Stay tuned!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","frontmatter":{"title":"Local NPM Packages","date":"July 11, 2017"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/local-npm-packages/","previous":null,"next":{"fields":{"slug":"/git-solo/"},"frontmatter":{"title":"Git for Solo Development"}}}}
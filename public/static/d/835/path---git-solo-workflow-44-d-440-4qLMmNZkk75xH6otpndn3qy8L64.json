{"data":{"site":{"siteMetadata":{"title":"Steveostudios","author":"@steveostudios"}},"markdownRemark":{"id":"c528dfe1-83b2-52c6-a210-077a7a8a16f6","excerpt":"This is part two of a series on on using Git as a solo-developer. If you haven‚Äôt already, I‚Äôd recommend you read part one. In this article I‚Äôm going to go over‚Ä¶","html":"<blockquote>\n<p>This is part two of a series on on using Git as a solo-developer. If you haven‚Äôt already, I‚Äôd recommend you read part one.</p>\n</blockquote>\n<p>In this article I‚Äôm going to go over my workflow when it comes to using Git and writing code. I‚Äôm by no means an expert at this, so feel free to adapt anything you see here to suit your needs!</p>\n<h2>Super Board</h2>\n<p>I feel like my brain thinks in kanbans boards. They are really clean and easy to organize your thoughts and plans, especially when the execution process is repetitive. And when it comes to a specific tool, GitLab‚Äôs Issue Boards are the second best kanban in my opinion (one being Trello). Which is great, because I already use GitLab as my remote repository and my issue tracker.</p>\n<p>I start my day going to my pinned GitLab Issue Board tab. I‚Äôll be checking this periodically through my day to regain perspective on my entire project, as well as have it ready and waiting to accrue new features an bugs as I come across them.</p>\n<h2>The Flow</h2>\n<h3>Get in the¬†zone</h3>\n<p>‚òëÔ∏è Coffee</p>\n<p>‚òëÔ∏è Good music</p>\n<p>‚òëÔ∏è Quieted head-space</p>\n<h3>Find the¬†task</h3>\n<p>Now that I am ready to go, I peruse the issue board in GitLab. I find what needs to be done next (based on estimated time to complete and priority).</p>\n<h3>Start the task</h3>\n<p>Next I do something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">git checkout develop\ngit pull\ngit checkout -b 42-fix-file-importer\ngit push --set-upstream origin</code></pre></div>\n<p>Actually, because I have aliases set up for my workflow, it looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">gcd\ngpl\ngcb 42-fix-file-importer\ngpsup</code></pre></div>\n<p>Let‚Äôs break this down:</p>\n<ul>\n<li><code class=\"language-text\">git checkout develop</code> and <code class=\"language-text\">git pull</code> makes sure that I have to latest build of my app (which I should since I‚Äôm the only person working on it, but just in case). As a side note, I work off of the <code class=\"language-text\">develop</code> branch and use <code class=\"language-text\">master</code> only for my production releases.</li>\n<li><code class=\"language-text\">git checkout -b 42-fix-file-importer</code> creates a new branch. The name of the branch could be anything, but I find it super helpful to prefix it with the issue number automatically assigned by GitLab‚Äôs Issue Board. I also make sure to give it a name that I can associate with the bug or feature later.</li>\n<li><code class=\"language-text\">git push --set-upstream origin</code> pushes this new branch to my remote repository. Later I can just <code class=\"language-text\">git push</code> but the first time you push you need to create the branch on the remote repo. I find it easiest to do this all at once, instead of after I‚Äôm ready for my first commit.</li>\n</ul>\n<h3>Let‚Äôs code!</h3>\n<p>Now is the follow a steady ritual of finding where I need to place code, mistype it four or five times, test, beat my head against the desk, try again, figure it out, and dance around‚Ä¶ Standard coding.</p>\n<h3>Found a bug¬†üêû</h3>\n<p>While I am working on something, I force myself to not fix every bug I find when I find it, but instead create an issue for it. This may seem counter-intuitive, but I find it helps for two reasons:</p>\n<ol>\n<li>It forces me to stay focused on the task at hand, instead of going down a rabbit trail of improvements. Because, once I fix that issue I‚Äôll remember that that bug also exist somewhere else too. And in that file I forgot to use my new <em>new</em> organization structure‚Ä¶ NO! Create an issue! Write down what I am thinking in the description and then move on. If the bug is so easy to solve right now, it should be no problem later!</li>\n<li>It means that this branch remains pure. The commits that I create only have to do with the that particular issue. I‚Äôm not fixing the file importer AND messing with CSS somewhere else, in the same issue. If (when) I ever need to go back in my git history, I‚Äôm not undoing completely unrelated things!</li>\n</ol>\n<p>I generally use VS Code‚Äôs Git panel for committing, since I don‚Äôt like to leave my editor when I don‚Äôt have to. I‚Äôm not sure if it‚Äôs best practice or not, but I like to push my code after every few commits. It would suck if I spilled my coffee on my computer and that was the only place my recent work lived, so I make sure I push it to my remote repo.</p>\n<hr>\n<h3>All done</h3>\n<p>Once in my done with that feature or bug, I <code class=\"language-text\">git push</code> one final time. I then create a merge request to merge that branch back into <code class=\"language-text\">develop</code>. The trick here is to use the sick GitLab Workflow plugin. Simply hit CMD+Shift+P then type ‚Äúcreate‚Äù and I‚Äôll get a match for ‚ÄúGitLab: Create new merge request on current project‚Äù. I hit return and my browser opens up to a merge request already waiting for me to hit merge! To finalize the merge request, check ‚Äúdelete branch‚Äù, and apply the merge.</p>\n<h3>Check it¬†off</h3>\n<p>Because I prefixed this branch with the issue number, GitLab is smart enough to automatically <strong>close the issue</strong> when the branch is merged. This is SUPER helpful, because in one fell swoop I finish my code, merge it, and check off a todo! I feel like a samurai every time!</p>\n<hr>\n<p>I‚Äôll go over my particular workflow in another post, and show you specifically how I use Git not only as my code repository, but also my task list. Stay tuned!</p>","frontmatter":{"title":"Git Workflow for Solo Development","date":"April 09, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/git-solo-workflow/","previous":{"fields":{"slug":"/git-solo/"},"frontmatter":{"title":"Git for Solo Development"}},"next":null}}
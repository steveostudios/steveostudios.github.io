{"data":{"site":{"siteMetadata":{"title":"Steveostudios","author":"@steveostudios"}},"markdownRemark":{"id":"4a048a11-a803-5011-ad71-150f4829a9dc","excerpt":"Testing is one of those things that I have shrugged off for a while. It’s like flossing. I know the benefits. People say that it’s easy. It will make Future…","html":"<p>Testing is one of those things that I have shrugged off for a while. It’s like flossing. I know the benefits. People say that it’s easy. It will make Future-Steve invincible. And, I feel bad about <em>not</em> doing it. It just is one more thing that I am unsure of how to fit into my daily routine. So, with this new project I am working on I decided to do it right from the beginning.</p>\n<p>I’m going to show you how to do some basic testing. Our end goal for this post will be to write a test for the following module:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isValidEmail</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>email <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token regex\">/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w+)+$/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>(Side note: I know that this regular expression is not perfect. There are thousands of these out there and with every one a <em>thousand-and-one critics.</em> That said, we’re gonna write some tests against this function.)</p>\n<p>We’re going to use <a href=\"https://mochajs.org/\" title=\"Mocha\">Mocha</a> for our testing framework. Honestly, to get started I looked for the most popular framework and went with that. I don’t know a whole lot about testing at this point, so I wanted to use something well documented and well used.</p>\n<p>We’re also going to use <a href=\"http://chaijs.com/\" title=\"Chai\">Chai</a>. From my understanding this is a Mocha plugin that just adds some assertions. It’s gonna make our tests more human-discernible.</p>\n<p>Let’s start by installing these:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">npm i mocha -D\nnpm i chai -D</code></pre></div>\n<p>…and open up our new <code class=\"language-text\">test.js</code> file.</p>\n<p>From here, we need to initiate our Javascript file and let it know what it’s supposed to do.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// test/test.js</span>\n<span class=\"token string\">'use strict'</span>\n<span class=\"token keyword\">const</span> chai <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'chai'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> login <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../index'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Here we are using Chai like a plugin by requiring it. Also, we’re require the file we want to test. Makes sense, right?!</p>\n<p>Okay, now, let’s write our first <code class=\"language-text\">describe</code>. A <code class=\"language-text\">describe</code> tells Mocha how to treat a certain function.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// test/test.js</span>\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#isValidEmail'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// we're going to put our actual test in here.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sweet. Now the first test we want to write is to make sure a “normal looking” email address (like “abc@def.com) ”returns true. So, in the describe let’s add our test. (the new stuff is in <strong>bold</strong>).</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// test/test.js</span>\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#isValidEmail'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should return true for abc@def.com'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> login<span class=\"token punctuation\">.</span><span class=\"token function\">isValidEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc@def.com'</span><span class=\"token punctuation\">)</span>\n    chai<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, let’s break this down. The <code class=\"language-text\">it</code> line should read like a sentence, phrased with <em>“it should…”</em> and then what it should do. Treat this like a note about how the code should test. If the test fails you will see this, so it needs to be helpful as to what this test is actually testing.</p>\n<p>Next, we save the result of the function (with the fake email address) as a variable.</p>\n<p>Finally, we use Chai to describe what we want the result to look like. It’s crazy how readable this is!</p>\n<p>Chai expect[s][the] result to be true.</p>\n<p>BOOM! We wrote a test!</p>\n<p>…but how do we… <em>test it…</em></p>\n<p>It turns out this is ridiculously simple with npm. In your package.json, let’s add a test script</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">// package.json\n...\n<span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mocha --reporter spec\"</span>\n<span class=\"token punctuation\">}</span>\n...</code></pre></div>\n<p>Here we are telling npm that Mocha is our tester. Somehow it will find that <code class=\"language-text\">test.js</code> file. Now, if we run <code class=\"language-text\">npm test</code> in our terminal, Mocha should run the test file and should spit out some stuff!</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">&gt; mocha --reporter spec\n\n#isValidEmail\n✓ should return true for abc@def.com\n\n1 passing (9ms)</code></pre></div>\n<p>WHAT! This is freaking cool — and easy!</p>\n<p>Let’s add a few more tests for giggles:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// user forgot the `something@`</span>\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return false for abcdef.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> login<span class=\"token punctuation\">.</span><span class=\"token function\">isValidEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcdef.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  chai<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// user forgot the `.com`</span>\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return false for abc@def\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> login<span class=\"token punctuation\">.</span><span class=\"token function\">isValidEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc@def\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  chai<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// test for 2 character TLDs</span>\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return true for abc@def.co\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> login<span class=\"token punctuation\">.</span><span class=\"token function\">isValidEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc@def.co\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  chai<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// test for country TLDs</span>\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return true for abc@def.co.uk\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> login<span class=\"token punctuation\">.</span><span class=\"token function\">isValidEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc@def.co.uk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  chai<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>and then run <code class=\"language-text\">npm test</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">&gt; mocha --reporter spec\n\n#isValidEmail\n✓ should return true for abc@def.com\n✓ should return false for abcdef.com\n✓ should return false for abc@def\n✓ should return true for abc@def.co\n✓ should return true for abc@def.co.uk\n\n5 passing (26ms)</code></pre></div>\n<p>Sweet. Now, let’s say the Future-Steve rides in on his hover-board and messes something up with this function (because in the future I still don’t understand regular expressions!).</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.js</span>\n\n<span class=\"token comment\">// removed the bold *(\\.\\w+)+$ from the old verion</span>\n<span class=\"token comment\">// which is the bit at the end that tell it that it needs the '.com'</span>\n\n<span class=\"token comment\">// Future-Steve's modified code</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isValidEmail</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>email <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token regex\">/^\\w+([\\.-]?\\w+)\\*@\\w+([\\.-]?\\w+)/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When Future-Steve runs <code class=\"language-text\">npm test</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">&gt; mocha --reporter spec\n\n#isValidEmail\n✓ should return true for abc@def.com\n✓ should return false for abcdef.com 1) should return false for abc@def\n✓ should return true for abc@def.co\n✓ should return true for abc@def.co.uk\n\n4 passing (26ms)\n1 failing\n\n1. #isValidEmail should return false for abc@def:\n\n   AssertionError: expected true to be false\n\n   - expected - actual\n\n   -true\n   +false\n\n   at Context.it (test/test.js:47:30)</code></pre></div>\n<p>Ha! Booyah Future-Steve! In your FACE! Future-Steve will know what he broke and exactly how he can fix it! Pretty cool!</p>","frontmatter":{"title":"Getting Started with Mocha testing in Javascript","date":"July 05, 2017"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/getting-started-with-mocha/","previous":{"fields":{"slug":"/sketch-export-magic/"},"frontmatter":{"title":"Changing Your View in Sketch"}},"next":{"fields":{"slug":"/local-npm-packages/"},"frontmatter":{"title":"Local NPM Packages"}}}}